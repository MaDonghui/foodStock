{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","registerServiceWorker.js","index.js"],"names":["Business","react_default","a","createElement","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","Business_Business_Business","key","id","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","term","location","sortBy","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","sortByOptions","Best Match","Highest Rated","Most Reviewed","sortByOption","setState","e","target","value","searchYelp","preventDefault","_this2","keys","sortByOptionsValue","getSortByClass","onClick","handleSortByChange","placeholder","onChange","renderSortByOptions","Yelp","search","fetch","concat","headers","Authorization","then","response","ok","json","console","log","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","SearchBar_SearchBar_SearchBar","BusinessList_BusinessList_BusinessList","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.677f6709.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\nexport default class Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc} alt='' />\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>{this.props.business.state + '' + this.props.business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                        <p>{this.props.business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nexport default class BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => {return <Business business={business} key={business.id}/>})}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport default class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: \"\",\n      location: \"\",\n      sortBy: \"best_match\"\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n    this.sortByOptions = {\n      \"Best Match\": \"best_match\",\n      \"Highest Rated\": \"rating\",\n      \"Most Reviewed\": \"review_count\"\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return \"active\";\n    }\n    return \"\";\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption });\n  }\n\n  handleTermChange(e) {\n    this.setState({ term: e.target.value });\n  }\n\n  handleLocationChange(e) {\n    this.setState({ location: e.target.value });\n  }\n\n  handleSearch(e) {\n    this.props.searchYelp(\n      this.state.term,\n      this.state.location,\n      this.state.sortBy\n    );\n    e.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionsValue = this.sortByOptions[sortByOption];\n      return (\n        <li\n          key={sortByOptionsValue}\n          className={this.getSortByClass(sortByOptionsValue)}\n          onClick={this.handleSortByChange.bind(this, sortByOptionsValue)}\n        >\n          {sortByOption}\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-fields\">\n          <input\n            placeholder=\"Food Name\"\n            onChange={this.handleTermChange}\n            id=\"foodName\"\n          />\n          <input \n            placeholder=\"Where?\" \n            onChange={this.handleLocationChange} \n            id=\"locationName\"\n          />\n        </div>\n        <div className=\"SearchBar-sort-options\">\n          <ul>{this.renderSortByOptions()}</ul>\n        </div>\n        <div className=\"SearchBar-submit\" onClick={this.handleSearch}>\n          <a>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n","const apiKey =\n  \"N03LKYLrIi_ApS1kLcX8b0txsTNttVV7CDBdh5fmct7G2T1ZeahXfWTaKFIJHoG5SzFplk75vpihb5W5xWaReamHAnoIk72aTG8ithYGsv6ZnBRrX2orfmVwqJk1XHYx\";\n\nconst Yelp = {\n  search(term, location, sortBy) {\n    return fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n      {\n        headers: { Authorization: `Bearer ${apiKey}` }\n      }\n    )\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        console.log('Request failed')\n      })\n      .then(jsonResponse => {\n        if (jsonResponse.businesses) {\n          return jsonResponse.businesses.map(business => ({\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address1,\n            city: business.location.city,\n            state: business.location.state,\n            zipCode: business.location.zip_code,\n            category: business.categories[0].title,\n            rating: business.rating,\n            reviewCount: business.review_count\n          }));\n        }\n      });\n  }\n};\n\nexport default Yelp;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport BusinessList from \"./components/BusinessList/BusinessList\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\n\nimport Yelp from \"./util/Yelp.js\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id=\"logo\">Food<br></br>Stock</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}